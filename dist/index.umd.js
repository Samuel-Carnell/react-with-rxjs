!function(e,t){"object"==typeof exports&&"undefined"!=typeof module?t(exports,require("react"),require("rxjs")):"function"==typeof define&&define.amd?define(["exports","react","rxjs"],t):t((e="undefined"!=typeof globalThis?globalThis:e||self)["react-with-rxjs"]={},e.react,e.rxjs)}(this,(function(e,t,r){"use strict";function n(e,t){return Array.isArray(e)?function(e,t){return e.map(t)}(e,t):function(e,t){return Object.keys(e).map((t=>[t,e[t]])).reduce(((e,[r,n])=>(e[r]=t(n),e)),{})}(e,t)}function u(){const e=t.useRef(),n=function(){const[,e]=t.useState(Object.create(null));return t.useCallback((()=>{e(Object.create(null))}),[e])}();return[t.useCallback((()=>{void 0===e.current&&(e.current=n,r.asapScheduler.schedule((()=>{void 0!==e.current&&(e.current(),e.current=void 0)})))}),[]),t.useCallback((()=>{e.current=void 0}),[])]}class c{constructor(e){this._value=e}setState(e){this._value=e}getCurrentState(){return this._value}}function o(){const e=function(){const e=t.useRef([]);return t.useEffect((()=>()=>{e.current.forEach((e=>{e.closed||e.unsubscribe()}))}),[]),t.useCallback((t=>{e.current.push(t)}),[])}(),[r,n]=u();return t.useLayoutEffect((()=>n)),t.useCallback((t=>{let n=!0;const u=new c({});return e(t.subscribe({error(e){u.setState({error:e}),n||r()},next(e){u.setState({value:e}),n||r()}})),n=!1,u}),[])}function s(e){return function(...u){const s=o(),a=function(e){const[n]=t.useState((()=>e.map((e=>new r.BehaviorSubject(e)))));return t.useEffect((()=>{n.forEach(((t,r)=>{const n=e[r];Object.is(n,t.getValue())||t.next(n)}))})),n}(u),[i]=t.useState((()=>{const t=e(...a);if(!Array.isArray(t)&&("object"!=typeof(u=t)||null===u||Object.getPrototypeOf(u).constructor!==Object))throw new Error("Function getState must return either an object or array.");var u;return n(t,(e=>r.isObservable(e)?s(e):e))}));return n(i,(e=>{if(!(e instanceof c))return e;const t=e.getCurrentState();if(void 0!==t.error)throw t.error;return t.value}))}}e.bind=s,e.default=s,Object.defineProperty(e,"__esModule",{value:!0})}));
//# sourceMappingURL=index.umd.js.map
